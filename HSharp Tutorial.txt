Learning H#

Hello everybody! My name is Phil Lane, and I'm here to teach you how to use H#. Now, as I am the creator of the language, this tutorial will be the most accurate and deep tutorial you'll ever find. So let's do this!

About H#

H# is an interpreted, functional, half-lazy, weakly-typed scripting language. It is interpreted, meaning it does not run on the level of machine code, but rather, has a program running behind the H#. It's also functional, meaning programs are expressed as function calls. All functions have outputs lacking side effects. This means you can theoretically call any function at any time without worrying about it changing program state. All values are immutable, so even if a function wanted to screw with your variables, it wouldn't be able to.

H# is also weakly-typed. The program will not break if you try to divide a boolean by a list. If the interpreter cannot do an operation with the values provided to it, it lets its internal CAS just return the value it was given. This method also means that you can use variables not yet defined to it. We'll discuss this in more detail later on.

Regarding H# being half-lazy: It uses lazy evaluation in some places and eager evaluation in other places. Later on, we'll learn where these places are.


Chapter 1: Getting Familiar with HSCi

As H# is influenced highly by math, you can almost call the language an enhanced calculator. Going off of this, we'll start with stuff that will be very familiar to you. Enter these into your H# Interactive console and check out the results:
2+2
6*5
(3-5)/2
2+4+x
x+2+4
7^8
x where x=5
If you did this correctly, you should have the results 4, 30, -1, 6+x, x+2+4, 5764801, and 5 respectively. We'll go over each of these and see why you got the results you did.

The first two inputs demonstrate the basic arithmetic operations. H# supports the basic four: +, -, *, and / for addition, subtraction, multiplication, and division. H# follows the order of operations strictly.

The third input shows how you can use parenthesis to change the order of operations. General rule in H#: If an expression is wrapped in parenthesis, IT WILL BE EVALUATED. Even if the result is unneeded or will later be discarded, the result will still be found. Therefore it is important to only use parenthesis where needed.

The fourth input shows the internal CAS at work. The math parser doesn't strive to "solve" an expression, but rather to "simplify" as much as possible.

The fifth input shows that the CAS is not a full-fledged CAS (speed limitations) and that you should be careful in ordering your expressions. The reason this expression did not simplify is because H# evaluates left to right. It tried to add x+2. Being unsuccessful, it moved on. It tried to add 4 to x+2. It knew that x was unknown, but doesn't see that it can add it to 2 to get the result of x+6.

The sixth shows exponentiation at work.

The seventh and final input shows a glimpse of something we will go over in much depth later on. Just a sneak peak!

Regarding HSCi itself: it will simplify an expression and return the result onto the console screen. No need to use any output command.

H# has eight main types:
Number
Boolean
List (can contain several different types inside of it)
Unknown
Infinity
Function
Unsimplified Expression (can contain several different types inside of it)
We touched on numbers just earlier. Anything from 4 to .1 to -999999 is a number. A boolean is either "true" or "false." Because of this, if a value is a boolean, it can only have two possible values. A list is kind of self-explanatory. It is a list of different values, all contained in one, singular value. Infinity is just infinity. You can generate this value by doing <some number>/0 in HSCi. Unknown is a bit different, and this will also be covered later on. Finally, a function is, well, a function. Later on we'll see how these are first-order value types, instead of a structure.

There are ways to print text to the screen in H#, so you may be wondering, "What about strings or characters? Aren't those datatypes?" Actually, no. Strings are syntactic sugar for number lists, containing the ASCII codes of the individual characters. Go ahead, try it yourself! Go to HSCi and type in "Hello world!", and you'll get a list of the different ASCII codes.

Chapter 2: Booleans and Branching

There are a few main boolean operators:
= (equals)
/= (not equals)
> (greater than)
>= (greater than or equal to)
< (less than)
<= (less than or equal to)
and (and)
or (or)
Each of these operators are infix operators, meaning they take two parameters: one on the left-hand side, and one on the right. We can even try these out right now! Grab your handy HSCi and try out some code:
3=3
3>5
3/=3
x=x
x=y
7=7 and 3>-6
true and false
true or false
Each of these should return a boolean condition: either "true" or "false." The first six operators (= thru <=) should be familiar to you, and I won't bother going over those (note that = and /= work on any two values, but the other four only work on numeric values). "and" and "or" are ways to check multiple boolean values. "and" requires both the left and right to be "true." "or" requires only one of the sides to be "true." They are lazy, which means: if you make a chain of "and"/"or" operators, they will evaluate each one from left to right. If you have a chain of "and"s and one term is "false," the chain returns false immediately and doesn't bother checking any more. If you have a chain of "or"s and one term is "true," the chain returns true immediately and doesn't bother checking any more. We can demonstrate this:
3=3 and 4/=4 and 5=5
here, 5=5 is never actually evaluated. Since 4/=4 is false, the interpreter knows that there's no use in checking any further, since the chain will return false anyway.

What is this good for? Well, we have our first example of branching: an "if" expression! In H#, there is no "if" statement, since that goes against the functional paradigm. "if" expressions have a return value.
if [condition] then [value 1] else [value 2]
If you know Haskell, you'll find that H# "if" expressions are identical to those of Haskell. So if I have:
if 4>1 then 0 else 1
You'll see that the expression has the value of "0". However, if you flip the > to a <
if 4<1 then 0 else 1
The expression has the value of "1". This will become one of our most important tools later on.

Chapter 3: The "let" Command

Variables in H# are immutable, meaning that once they're assigned, they stay that way forever and can never be changed. To assign a value to a variable, we use the "let" command:
let [variable]=[value]
IMPORTANT NOTE: Variables cannot have capital letters for reasons explained later on!
So if we wanted to assign the value of 4 to variable x, we would say
let x = 4
Put that in HSCi. Then, if you type "x", you'll receive the value 4! Note that [value] part of a "let" command is lazy. It is evaluated when the variable is referenced. This means that if you do
let x = 2+2
x is not equal to 4. It is equal to 2+2 and strictly 2+2. However, referencing "x" gives the value of 4. Why is this? Well, remember that the math parser simplifies as much as possible. So here's the thought going through the parser's head:
x //okay, so what does x equal?
2+2 //cool, cool, but I can simplify this
4 //looks good enough to me, let's give this back to the user
Note that // denotes a comment. Anything after // on a line is not parsed.
Now that we see this, let's try chaining together some variable declarations:
let x = y
let y = z
let z = 2 + a
let a = 3
Typing in x into HSCi returns 5, so let's see the thoughts of the interpreter:
x -> y -> z -> 2+a -> 2+3 -> 5

"let" is not restricted to variables. Check out this cool code:
let 2+2 = 5
This may make math explode, but H# goes along with it. From now on in the code, doing 2+2 will return the value of 5! "let" allows you to assign a value to any variable or expression, given it has not been already assigned. Try out this code:
let 3+2 = 6
let 3+2 = 5 //error: Value under name "3+2" already exists, bound to value "6"
Trying to recalculate 3+2 will always return 6 forevermore.

There is a specific predicate you can attach to "let" statements called the "if" predicate. If the condition evaluates to "true", then the value will be bound. Otherwise, the "let" statement is ignored. BE CAREFUL WITH IF PREDICATES! If you have code like:
let y=5 if x=6
there is no guarentee that y will ever hold a value! It would be most efficient to either do:
let y=5 if x=6
let y=4 if x/=6 //ensures that y will eventually be defined
or the better, more declarative way:
let y = if x=6 then 5 else 4
Note that in the latter technique, x is check every time y is referenced. If you want the value checked only once, the former technique is better.

Chapter 4: "where" Predicates

Let's say you want 2+2 to be equal to 5, but for only one command. After that command, you want 2+2 to go back to being 4. Well, what you need is a "where" predicate:
(3-1)+2 where 2+2=5
"where" predicates provide a sort of encapsulation in H#. They bind a value to a variable/expression, and then unbinds the value once the line is finished parsing.
x where x=3 //evaluates to 3
x //evaluates to x, since x was unbound from 3 after the previous line

You can chain "where" predicates back-to-back, and they'll evaluate from right to left. The two lines are equivalent:
x where x=y where y=z where z=a where a=1
x where x=(y where y=(z where z=(a where a=1)))
This means that you CANNOT do the following:
x where x=y+(y where y=1) //evaluates to y+1 instead of 2, because y goes out of scope once it leaves the parenthesis
but you CAN do
x where x=y+y where y=1
because the parenthesis are implied at
x where x=(y+y where y=1)

Later on, "where" predicates will become very essential to our programs.

Chapter 5: Reviewing What We Know So Far

So in the previous four chapters, we went over math, H# types, branching, "let" commands, and "were" predicates. Now let's put these all to good use! Let's convert the following small C# program to H# (assuming the following code is inside a static class):

private const int input = 10 //any input can be here. I'm using an input variable since we won't be using IO commands in H#
private static int x()
{
    int y=5;
    return Math.Pow(y+3, 2)*5;
}
public static int Main()
{
    if (input > 9)
    {
        return x();
    }
    else
    {
        return x() + input;
    }
}

So first off, we can directly port the first line to
let input = 10
Now we need to port the function x. It takes no arguments, so we can state it as a variable. But wait, it declares y inside of x! Not to fear, this is the main reason why "where" predicates exist!
let x = (y+3)^2*5 where y=5
Now for our main program, this doesn't need to be inside a function. Since we have to convert from an imperative paradigm to a functional paradigm, we will need to change how we approach this. Remember that "if" statements in H# are not stataments, but expressions. So we can return x, and then add either input or 0 depending on our condition.
x + if input > 9 then 0 else input
Perfect! Now we have our entire program. Notice how we made a full paradigm shift! We can further compact this code by changing "let input" to a "where input" predicate on the last line. We have our final, full program:
let x = (y+3)^2*5 where y=5
x + if input > 9 then 0 else input where input = 10
Perfect! Run the program and you should see 50. Since we ended up using "where" in the final program instead of a standard variable, we can rerun the final line as much as we want with as many different values as we want! Change the "input=10" to "input=6" and you should see 56. It adds the 6 to 50 since 6 is not greater than 9.

Notice how we put the "where" predicate as the outermost statement. As a general rule, "where" predicates should always be outside everything else in a line, unless you're using parenthesis. If you nest a "where" predicate inside a line and don't wrap () around it, YOUR PROGRAM IS LIKELY TO BREAK OR BEHAVE UNEXPECTEDLY. However, wrapping "where" predicates in () forces its evalutation, even if unneeded. Thus, it is most likely better (performance-wise) to always put "where" statements at the end of your expressions.

Congratulations! You've made your first H# program! In the next chapter, we're going to learn about the core of functional programming, and the powerful tools that push it in H#.

Chapter 6: Functions and Wildcards

Functions. Functional programming. Functional programming is, in essence, programming by the use of function calling. In this chapter, we'll learn how H# decides to implement functions. First, let's try out one of the build-in functions:
floor[6.2]
The floor function rounds any number toward 0. As you notice, the function name comes first, then a pair of brackets, then the value. Let's try a function with multiple arguments:
nrt[16,4]
The nth root function takes two arguments--the number and the base respectively--and finds the nth root. Notice it's the same syntax but with a comma separating the arguments. Why don't you say we make one of these functions!
let addone[X] = X+1
Now, we know that we can't have variables with capital letters. Why use them here? X in this context is a wildcard. It is contained in function declaration, and it lets the interpreter know that it can assume any value. So, with a variable, it must show in the code exactly how it is in the declaration. If you have a wildcard, it will adapt to see what you're trying to do.

Wildcards must start with a capital letter, and can contain capital and lowercase letters following the first letter. Now, let's make a more generic function:
let add[NumOne,NumTwo] = NumOne+NumTwo
Now we've made an addition function! Try it! After you write the declaration, input something like add[5,6] and see what comes out!
Functions aren't restricted to this syntax. It is important to use this syntax for reasons expressed in the next chapter. However, it is possible to do this:
let X+Y = X-Y
Try it out! You've now made all addition operations into subtraction operations! In fact, the ability to use functions like this is utilized in the factorial function. If you input:
5!
It's actually not a part of the math parser! It's a preloaded function, defined as X!, that calls a factorial algorithm (specifically the gamma function). You can actually see this by doing:
let X! = <anything here>
The interpreter won't let you do that because it's already a function, and then it'll show you the hidden part of the factorial, namely:
Error: Value under name "X!" already exists, bound to value "internalcmmdgamaX+1"
You can also do this trick with the other functions, including floor, ceiling, sin, atan, and several more. Below is a full list of H# functions, as they are defined in the raw source code:
X! //factorial
sin[X] //sine
cos[X] //cos
tan[X] //tan
asin[X] //arcsine
acos[X] //arccosine
atan[X] //arctangent
print[X] //output the value, and return the input (DOES NOT FOLLOW THE FUNCTIONAL PARADIGM [has side effects], BE CAREFUL)
printstr[X] //output a number list as a string, and return the input (DOES NOT FOLLOW THE FUNCTIONAL PARADIGM [has side effects], BE CAREFUL)
printstrln[X] //output a number list as a string followed by a newline, and return the input (DOES NOT FOLLOW THE FUNCTIONAL PARADIGM [has side effects], BE CAREFUL)
floor[X] //round toward 0
ceiling[X] //round away from 0
X{A} //get list index (discussed later)
map[F,L] //map function to list (discussed later)
filter[F,L] //filter values from list via function (discussed later)
round[X] //round X as per standard math rounding procedure
max[A,B] //get the greater of two numbers
min[A,B] //get the lesser of two numbers
abs[X] //absolute value of X
A%B //modulo division
ln[X] //natural log
log[X] //log base 10
log[X,Y] //log base Y
sign[X] //if number is negative, 0, or positive; return -1, 0, or 1 respectively
sqrt[X] //square root
cbrt[X] //cube root
nrt[X,N] //get Nth root of X
truncate[X] //remove decimal part of number
reciprocal[X] //get reciprocal

One final thing in this chapter: What do the brackets mean? Why don't we use a different syntax more like Haskell or F#? Well, brackets in H# represent a list. Lists are a way to show several values compacted into one. [5] is a list containing one value: five. [1,2,3] is a list containing  3 values. Try it out! Do something like [2+2,3+3] and see how it simplifies to [4,6].

So when we call a function like log[5,6], we're actually sending only one value to the log function: a list containing two values. The list is interpreted and separated into two values.

Chapter 7: Higher-order Functions

When we were learning about H# types, we saw that a function was just as much of a type as a number? How is this? The answer lies in higher-order functions. If you knew Java or C# or any similar language, you know that lambdas can be used as functions, and passed from function to function as a value itself. In languages like Haskell, H#, and F#; every function is like this! Any function you define can be passed as a value or called. Here's a basic example of using a higher-order function:
let f[X] = X+1 //assign X+1 to function f
let call[FuncIn, Value] = FuncIn[Value] //define call to take two parameters: a function, and a value
call[f, 5] //executing the "call" function, passing our previous function (f) as a parameter!
Go on and try it! You should get "6". As we see, we define f as a function, pass it as a parameter to another function, then call it using a wildcard variable!

If that's a little complicated, here's an easier example:
let f[X] = X+1 //define f[X]
let g = f //assign g to the function f
g[5] //call the function f via calling g

An example of a higher-order function in H# is the "map" function. It takes 2 arguments: a function with one argument, and a list. In the next chapter, we'll get to use this function.

Chapter 8: Lists

We touched on lists in chapter 6 learning about functions and how to pass arguments to them. In this chapter, we'll learn all about lists! First off, let's say we had 3 values: 1, 2, and 3, and we wanted to store all of those into variable x. How would we do it? Put it in a list!
let x = [1, 2, 3]
now, if we ask for the value of x, it will return:
[1,2,3]
Now how would we get an individual value from this list? We will use the following syntax: List{Index}. Lists are 0-indexed, meaning, to get the first element, you do list{0}. The second element is list{1}, the third is list{2}, etc. So if we have our list [1,2,3] and we wanted to extract the 3rd element, we would say:
x{2}
and out comes our output: 3.

Now say we wanted all numbers from 1 to 100 in a list. This would be extremely tedious to do. Imagine:
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18...etc...]
Luckily, there's a special operator for this task: the .. operator. If we do [X..Y] in a list, it contains a list with all the numbers from X to Y inclusive. So, you can type into HSCi:
[1..100]
And you'll receive your list! You can even do them backwards:
[10..1]

Now what if we only wanted the even numbers? Well, my friend, if you provide the first two numbers of a list, followed by the .. operator, H# will continue your pattern!
[2, 4..100]
Try it out! Your list will look something like:
[2,4,6,8,10,12,14,16,18,20...etc...100]

So let's look at some functions we can apply to lists. Two of the biggest ones will be "map" and "filter." The "map" function takes two input values: a function with one input value, and a list. It then distributes the function over each element of the list.

So if we have the C# code:

private static int square(int a) { return a * a; }
private static int[] Main()
{
    int[] list = new int[] { 1, 2, 3, 4, 5 };
    for(int i=0; i<list.Length; i++)
    {
        list[i] = square(list[i]);
    }
}

We see it declares a function that returns the square of the input. It then declares an array containing the numbers 1 through 5. Finally, it applies the "square" function to each element of "list". Let's rewrite this in H#:

map[f, [1..5]] where f[X]=X^2

Wow! It's so much shorter and honestly much more readable. We can revisit the C# code and try to make it as concise as possible:

private static int[] Main()
{
   return Enumerable.Range(1, 5).Select(x => x*x).ToArray();
}

It's better, but still nowhere near as clean as the H#, where these functions are a native part of the language. Continuing on, the "filter" function takes two input values: a function with one input value returning a boolean, and a list. It applies the function to each element of the list. If it returns true, it stays. If it returns false (or any non-boolean value), it goes. We can use this to make a list containing all primes between 3 to 20:

filter[isprime, [3, 5..20]] where isprime=...

And viola! A list containing all my wonderful primes!

Chapter 9: Pattern Matching

Chapter 10: Solidifying our Knowledge

Chapter 11: Lambdas

Chapter 12: Constraint Programming in H#

Chapter 10: Wrapping up Everything